<?php
/**
 * @file
 * Drupal hooks.
 */

define('MAX_IMAGE_SIZE_DEFAULT_WIDTH', 2560);
define('MAX_IMAGE_SIZE_DEFAULT_HEIGHT', 1600);

/**
 * Implements hook_file_presave().
 */
function max_image_size_file_presave($file) {

  // Don't resize uploaded files if the setting is disabled.
  if (!variable_get('max_image_size_presave_enabled', TRUE)) {

    return;
  }

  if ($image = max_image_size_resize_file($file)) {

    // Update the metadata so anything relying on it is still in sync.
    $file->filesize = $image->info['file_size'];
    $file->metadata['width'] = $image->info['width'];
    $file->metadata['height'] = $image->info['height'];
  }
}

/**
 * Implements hook_cron().
 */
function max_image_size_cron() {

  // Only run once per day.
  if (date('ymd', variable_get('cron_last')) == date('ymd')) {

    return;
  }

  // Only run cron if it is enabled.
  if (!variable_get('max_image_size_cron_enabled', TRUE)) {

    return;
  }

  $queue = DrupalQueue::get('max_image_size');
  $queue->createQueue();
  // Only check for larger images if our queue is currently empty.
  if ($queue->numberOfItems() > 0) {

    return;
  }

  $fids = max_image_size_get_oversized_images();
  if (!empty($fids)) {

    foreach ($fids as $fid) {

      $queue->createItem($fid);
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function max_image_size_cron_queue_info() {

  $queues = array();

  $queues['max_image_size'] = array(
    'worker callback' => 'max_image_size_resize_callback',
    'time' => 30,
  );

  return $queues;
}

/**
 * Implements hook_help().
 */
function max_image_size_help($path, $arg) {

  $message = NULL;

  switch ($path) {

    case 'admin/config/media/max-image-size':
      $message = '<p>' . t('Max Image Size will resize uploaded images to be below the following dimensions: @widthx@height. Once an image has been processed it is non-reversible, so please be sure that you set the correct dimensions.',
        array(
          '@width' => variable_get('max_image_size_width', MAX_IMAGE_SIZE_DEFAULT_WIDTH),
          '@height' => variable_get('max_image_size_height', MAX_IMAGE_SIZE_DEFAULT_HEIGHT),
        )) . '</p>';
      break;

    case 'admin/help#max_image_size':
      $message = '<p>' . t('Max Image Size will resize uploaded images to be below the following dimensions: @widthx@height. To adjust these settings visit <a href="/admin/config/media/max-image-size">the configuration page</a> and set the width and height to the desired values.',
        array(
          '@width' => variable_get('max_image_size_width', MAX_IMAGE_SIZE_DEFAULT_WIDTH),
          '@height' => variable_get('max_image_size_height', MAX_IMAGE_SIZE_DEFAULT_HEIGHT),
        )) . '</p>';
      break;
  }

  return $message;
}

/**
 * Cron queue callback to resize an image file.
 *
 * @param int $fid
 *   The file id to load.
 *
 * @return NULL
 *   No return value.
 */
function max_image_size_resize_callback($fid) {

  $file = file_load($fid);
  if (max_image_size_resize_file($file)) {

    // Call file_save so that metadata information gets updated.
    file_save($file);
  }
}

/**
 * Implements hook_menu().
 */
function max_image_size_menu() {

  $items = array();
  $items['admin/config/media/max-image-size'] = array(
    'title' => 'Max Image Size',
    'description' => 'Configure the behavior of the Max Image Size module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('max_image_size_system_settings_form'),
    'access arguments' => array('administer max_image_size'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function max_image_size_permission() {

  return array(
    'administer max_image_size' => array(
        'title' => t('Administer max image size'),
        'description' => t('Allows administration of the max image size module.'),
      ),
    );
}

/**
 * Implements hook_form().
 */
function max_image_size_system_settings_form() {

  $form = array();

  $dimensions = max_image_size_get_max_dimensions();

  $form['dimensions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Maximum dimensions'),
    '#description' => t('The maximum allowable dimensions that images will be used to resize images. Any images over the given dimensions will be scaled to fit.')
  );

  $form['dimensions']['max_image_size_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#description' => t('The maximum allowed width for Drupal managed images.'),
    '#default_value' => $dimensions['width'],
    '#size' => 5,
    '#maxlength' => 6,
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $form['dimensions']['max_image_size_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#description' => t('The maximum allowed height for Drupal managed images.'),
    '#default_value' => $dimensions['height'],
    '#size' => 5,
    '#maxlength' => 6,
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $form['max_image_size_cron_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cron processing enabled'),
    '#description' => t('Check this box to enable daily resizing of images to be below the specified dimensions.'),
    '#return_value' => TRUE,
    '#default_value' => variable_get('max_image_size_cron_enabled', TRUE),
  );

  $form['max_image_size_presave_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Presave enabled'),
    '#description' => t('Check this box to enable resizing of images when they are added to Drupal.'),
    '#return_value' => TRUE,
    '#default_value' => variable_get('max_image_size_presave_enabled', TRUE),
  );

  // Add a little information about the number of images that will be resized.
  $pending = count(max_image_size_get_oversized_images());
  $form['oversized_images'] = array(
    '#type' => 'item',
    '#title' => t('Pending images'),
    '#title_display' => 'invisible',
    '#description' => t('The number of images greater than the configured dimensions.'),
    '#markup' => ($pending <= 0 ?
      t('There are no images pending.') :
      format_plural($pending, 'There is one image pending.', 'There are @count images pending.')),
  );

  return system_settings_form($form);
}

/**
 * Get all images that are larger than the configured size.
 *
 * @return array
 *   An array of file IDs that are larger than the configured dimensions.
 */
function max_image_size_get_oversized_images() {

  $fids = drupal_static(__FUNCTION__, array());

  if (empty($fids)) {

    $dimensions = max_image_size_get_max_dimensions();

    // Find images that are already in the system with dimensions greater than our
    // target size. This abuses string sorting instead of actually sorting on
    // sizes since file_metadata values are serialized.
    $query = db_select('file_metadata', 'm')
              ->fields('m', array('fid'))
              ->condition(db_or()
                ->condition(db_and()
                              ->condition('m.name', 'width')
                              ->condition('m.value', serialize($dimensions['width']), '>'))
                ->condition(db_and()
                              ->condition('m.name', 'height')
                              ->condition('m.value', serialize($dimensions['height']), '>'))
              );

    $fids = $query->execute()->fetchCol();
  }

  return $fids;
}

/**
 * Get the maximum image dimensions allowed.
 *
 * @return array
 *   A key/value array of image dimensions.
 */
function max_image_size_get_max_dimensions() {

  $width = intval(variable_get('max_image_size_width', MAX_IMAGE_SIZE_DEFAULT_WIDTH));
  $height = intval(variable_get('max_image_size_height', MAX_IMAGE_SIZE_DEFAULT_HEIGHT));

  if ($width <= 0) {

    drupal_set_message(t('Max image width is set to an invalid size (must be greater than zero).'), 'warn');
    $width = MAX_IMAGE_SIZE_DEFAULT_WIDTH;
  }

  if ($height <= 0) {

    drupal_set_message(t('Max image height is set to an invalid size (must be greater than zero).'), 'warn');
    $height = MAX_IMAGE_SIZE_DEFAULT_HEIGHT;
  }

  return array(
    'width' => $width,
    'height' => $height,
  );
}

/**
 * Resize the given image file to be smaller than the configured dimensions.
 *
 * @param object $file
 *   A Drupal file entity.
 *
 * @return FALSE|object
 *   An image object from image_load() or FALSE on no change.
 */
function max_image_size_resize_file($file) {

  if (empty($file->type) || 'image' != $file->type) {

    return FALSE;
  }

  $dimensions = max_image_size_get_max_dimensions();

  $is_bad_size = empty($dimensions['width']) || $dimensions['width'] <= 0;
  $is_bad_size |= empty($dimensions['height']) || $dimensions['height'] <= 0;
  if ($is_bad_size) {

    watchdog('max_image_size',
      'Invalid image dimensions specified: @widthx@height',
      array(
        '@width' => $dimensions['width'],
        '@height' => $dimensions['height'],
      ),
      WATCHDOG_NOTICE);

    return FALSE;
  }

  $image = image_load($file->uri);
  $original = $image;
  if (!image_scale($image, $dimensions['width'], $dimensions['height'])) {

    return FALSE;
  }

  // image_scale() will return TRUE even if it doesn't adjust the image, so we
  // need to do our own check to avoid unnecessary image manipulations.
  $is_unchanged = $original->info['width'] == $image->info['width'];
  $is_unchanged &= $original->info['height'] == $image->info['height'];
  if ($is_unchanged) {

    return FALSE;
  }

  return image_save($image) ? $image : FALSE;
}
